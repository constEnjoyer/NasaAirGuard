"use client"

import { AlertTriangle, Bell } from "lucide-react"
import { Button } from "@/components/ui/button"
import { useAQIData } from "@/lib/use-aqi-data"
import { useState, useEffect, forwardRef, useImperativeHandle } from "react"

interface AlertsBoxProps {
  selectedCity: "NYC" | "LA"
}

export interface AlertsBoxRef {
  triggerNotification: () => void
}

const DEMO_NOTIFICATIONS = [
  {
    pollutant: "NO‚ÇÇ",
    value: 42,
    severity: "high",
    message:
      "‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å NO‚ÇÇ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏–∑–±–µ–≥–∞—Ç—å –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã—Ö —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≥—Ä—É–∑–æ–∫ –Ω–∞ —É–ª–∏—Ü–µ.",
    icon: "üöó",
    timestamp: new Date().toISOString(),
  },
  {
    pollutant: "O‚ÇÉ",
    value: 85,
    severity: "moderate",
    message:
      "‚òÄÔ∏è –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –æ–∑–æ–Ω–∞ –∏–∑-–∑–∞ —Å–æ–ª–Ω–µ—á–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –õ—é–¥—è–º —Å –∞—Å—Ç–º–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏.",
    icon: "‚òÄÔ∏è",
    timestamp: new Date().toISOString(),
  },
  {
    pollutant: "PM2.5",
    value: 38,
    severity: "high",
    message: "üí® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –º–µ–ª–∫–∏—Ö —á–∞—Å—Ç–∏—Ü PM2.5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞—Å–∫–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –Ω–∞ —É–ª–∏—Ü—É.",
    icon: "üí®",
    timestamp: new Date().toISOString(),
  },
  {
    pollutant: "AQI",
    value: 156,
    severity: "high",
    message: "üìä –û–±—â–∏–π –∏–Ω–¥–µ–∫—Å –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞ –¥–æ—Å—Ç–∏–≥ –Ω–µ–∑–¥–æ—Ä–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è. –ó–∞–∫—Ä–æ–π—Ç–µ –æ–∫–Ω–∞ –∏ –≤–∫–ª—é—á–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç–µ–ª–∏ –≤–æ–∑–¥—É—Ö–∞.",
    icon: "üìä",
    timestamp: new Date().toISOString(),
  },
  {
    pollutant: "NO‚ÇÇ",
    value: 28,
    severity: "moderate",
    message: "üö¶ –£–º–µ—Ä–µ–Ω–Ω–æ–µ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ NO‚ÇÇ –∏–∑-–∑–∞ –ø—Ä–æ–±–æ–∫ –≤ —á–∞—Å –ø–∏–∫. –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –ø–æ–µ–∑–¥–∫–∏ –Ω–∞ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ.",
    icon: "üöó",
    timestamp: new Date().toISOString(),
  },
  {
    pollutant: "O‚ÇÉ",
    value: 95,
    severity: "high",
    message: "üå°Ô∏è –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –æ–∑–æ–Ω–∞! –î–µ—Ç—è–º –∏ –ø–æ–∂–∏–ª—ã–º –ª—é–¥—è–º –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã—Ö–æ–¥–∏—Ç—å –Ω–∞ —É–ª–∏—Ü—É.",
    icon: "‚òÄÔ∏è",
    timestamp: new Date().toISOString(),
  },
]

const AlertsBox = forwardRef<AlertsBoxRef, AlertsBoxProps>(({ selectedCity }, ref) => {
  const { data: aqiData, isLoading } = useAQIData(selectedCity)
  const [currentNotificationIndex, setCurrentNotificationIndex] = useState(0)
  const [showNewNotification, setShowNewNotification] = useState(false)
  const [notificationHistory, setNotificationHistory] = useState<any[]>([])

  const triggerNotification = () => {
    setShowNewNotification(true)
    const nextNotification = {
      ...DEMO_NOTIFICATIONS[currentNotificationIndex],
      timestamp: new Date().toISOString(),
    }

    setNotificationHistory((prev) => [nextNotification, ...prev.slice(0, 4)])
    setCurrentNotificationIndex((prev) => (prev + 1) % DEMO_NOTIFICATIONS.length)

    setTimeout(() => setShowNewNotification(false), 1000)
  }

  useImperativeHandle(ref, () => ({
    triggerNotification,
  }))

  useEffect(() => {
    const interval = setInterval(() => {
      triggerNotification()
    }, 20000)

    if (notificationHistory.length === 0) {
      setNotificationHistory([
        {
          ...DEMO_NOTIFICATIONS[0],
          timestamp: new Date().toISOString(),
        },
      ])
    }

    return () => clearInterval(interval)
  }, [currentNotificationIndex, notificationHistory.length])

  if (isLoading) {
    return (
      <div className="bg-card rounded-lg border border-border p-6 shadow-lg h-full flex items-center justify-center">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary" />
      </div>
    )
  }

  return (
    <div className="bg-card rounded-lg border border-border p-6 shadow-lg h-full relative">
      <div className="flex items-center gap-2 mb-4">
        <AlertTriangle className="w-5 h-5 text-orange-500" />
        <h2 className="text-lg font-semibold">–£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞</h2>
        {showNewNotification && (
          <span className="ml-auto text-xs font-bold text-green-600 dark:text-green-400 animate-pulse">
            –ù–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï
          </span>
        )}
      </div>

      <div className="space-y-3 mb-6 max-h-[400px] overflow-y-auto">
        {notificationHistory.map((alert: any, index: number) => (
          <div
            key={`${alert.timestamp}-${index}`}
            className={`p-4 rounded-lg border transition-all duration-500 hover:shadow-md ${
              alert.severity === "high" ? "bg-red-500/10 border-red-500/30" : "bg-yellow-500/10 border-yellow-500/30"
            } ${index === 0 && showNewNotification ? "animate-in slide-in-from-top-5 scale-in-95" : ""}`}
            style={{
              opacity: index === 0 ? 1 : 0.7 - index * 0.15,
            }}
          >
            <div className="flex items-start gap-3">
              <div className="text-2xl">{alert.icon}</div>
              <div className="flex-1">
                <div className="flex items-center gap-2 mb-1">
                  <span
                    className={`text-xs font-bold px-2 py-0.5 rounded ${
                      alert.severity === "high" ? "bg-red-500 text-white" : "bg-yellow-500 text-white"
                    }`}
                  >
                    {alert.pollutant}
                  </span>
                  <span className="text-xs text-muted-foreground">{alert.value} –º–∫–≥/–º¬≥</span>
                  {index === 0 && showNewNotification && (
                    <span className="text-xs font-bold text-green-600 dark:text-green-400 ml-auto">–°–ï–ô–ß–ê–°</span>
                  )}
                </div>
                <p className="text-sm font-medium leading-relaxed">{alert.message}</p>
                <p className="text-xs text-muted-foreground mt-2">
                  {new Date(alert.timestamp).toLocaleString("ru-RU", {
                    hour: "2-digit",
                    minute: "2-digit",
                    second: "2-digit",
                  })}
                </p>
              </div>
            </div>
          </div>
        ))}
      </div>

      <Button className="w-full" variant="default">
        <Bell className="w-4 h-4 mr-2" />
        –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      </Button>

      <p className="text-xs text-muted-foreground text-center mt-3">
        –ü–æ–ª—É—á–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–æ–≤ NO‚ÇÇ, O‚ÇÉ –∏ PM2.5
      </p>
    </div>
  )
})

AlertsBox.displayName = "AlertsBox"

export default AlertsBox
